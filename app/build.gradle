apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

/* gets the version name from the latest Git tag, stripping the leading v off */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

gradle.allprojects {
    ext.getVersionCode = { ->
        def manifestFile = file("app/src/main/AndroidManifest.xml")
        def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcher = pattern.matcher(manifestText)
        matcher.find()
        return Integer.parseInt(matcher.group(1))
    }
}

repositories {
    jcenter()
}

dependencies {
    testCompile 'junit:junit:4.12'

    androidTestCompile 'com.android.support:support-annotations:25.3.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
}

android {
    compileSdkVersion 25
    buildToolsVersion '24.0.0'

    defaultConfig {
        archivesBaseName = "FDroidPrivilegedExtension"
        versionName getVersionName()

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        compileOptions.encoding = "UTF-8"

        // Use Java 1.7, requires minSdk 8
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        all {
            // Keep IPackageInstallObserver and IPackageDeleteObserver
            minifyEnabled false
            useProguard false
            shrinkResources false
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError true

        htmlReport true
        xmlReport false
        textReport false

        // this is never going to be a real "app"
        disable 'GoogleAppIndexingWarning'
    }

    File signFile = rootProject.file('signing.properties')
    if (signFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signFile))
        signingConfigs {
            release {
                storeFile rootProject.file(properties['key.store'])
                storePassword properties['key.store.password']
                keyAlias properties['key.alias']
                keyPassword properties['key.alias.password']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }

    applicationVariants.all { variant ->
        def name = variant.buildType.name
        def zipBase = file("${buildDir}/intermediates/updateZip${name.capitalize()}")
        def zipWithFDroidBase = file("${buildDir}/intermediates/updateZipWithFDroid${name.capitalize()}")

        def apkToCopy
        variant.outputs.each { output ->
            if (output.zipAlign) {
                apkToCopy = output.outputFile
            }
        }
        if (apkToCopy == null) {
            return;
        }

        def copyApkTask = project.tasks.create("copyApk${name.capitalize()}", Copy) {
            dependsOn variant.assemble
            from apkToCopy
            into zipBase
            rename { String fileName ->
                fileName = "${archivesBaseName}.apk"
            }
        }

        def copyScriptTask = project.tasks.create("copyScript${name.capitalize()}", Copy) {
            from "src/main/scripts/update-binary"
            into "${zipBase}/META-INF/com/google/android/"
        }

       def copyScript2Task = project.tasks.create("copyScript2${name.capitalize()}", Copy) {
            from "src/main/scripts/80-fdroid.sh"
            into "${zipBase}/"
        }

        def updateZipTask = project.tasks.create("assembleUpdateZip${name.capitalize()}", Zip) {
            dependsOn copyApkTask, copyScriptTask, copyScript2Task
            from zipBase
            if (name.equals("release")) {
              archiveName "${archivesBaseName}-${getVersionName()}.zip"
            } else {
              archiveName "${archivesBaseName}-${getVersionName()}-${name}.zip"
            }
        }

        def getPrivilegedExtensionApkTask = project.tasks.create("getPrivilegedExtensionApk${name.capitalize()}") {
            doLast {
                def downloadDir = "${buildDir}/intermediates"
                def f = new File("${downloadDir}/FDroidPrivilegedExtension.apk")
                def url = "https://f-droid.org/repo/org.fdroid.fdroid.privileged_" + getVersionCode() + ".apk"
                if (!f.exists()) {
                    println "Downloading ${url}"
                    new URL(url).withInputStream { i -> f.withOutputStream { it << i } }
                }
                def asc = new File("${downloadDir}/FDroidPrivilegedExtension.apk.asc")
                if (!asc.exists()) {
                    def ascurl = url + '.asc'
                    println "Downloading ${ascurl}"
                    new URL(ascurl).withInputStream { i -> asc.withOutputStream { it << i } }
                }
                println "Verifying using ${asc}"
                exec {
                    def keyring = new File(project.rootDir, '/f-droid.org-signing-key.gpg')
                    executable = 'gpg'
                    args '--keyring', keyring, '--no-default-keyring', '--verify', asc
                }
            }
        }

        def getFDroidApkTask = project.tasks.create("getFDroidApk${name.capitalize()}") {
            doLast {
                def downloadDir = "${buildDir}/intermediates"
                def f = new File("${downloadDir}/FDroid.apk")
                //def url = 'https://f-droid.org/FDroid.apk' // reenable once its v0.101 or newer
                def url = "https://f-droid.org/repo/org.fdroid.fdroid_102250.apk"
                if (!f.exists()) {
                    println "Downloading ${url}"
                    new URL(url).withInputStream { i -> f.withOutputStream { it << i } }
                }
                def asc = new File("${downloadDir}/FDroid.apk.asc")
                if (!asc.exists()) {
                    def ascurl = url + '.asc'
                    println "Downloading ${ascurl}"
                    new URL(ascurl).withInputStream { i -> asc.withOutputStream { it << i } }
                }
                println "Verifying using ${asc}"
                exec {
                    def keyring = new File(project.rootDir, '/f-droid.org-signing-key.gpg')
                    executable = 'gpg'
                    args '--keyring', keyring, '--no-default-keyring', '--verify', asc
                }
            }
        }

        def copyUpdateZipDirTask = project.tasks.create("copyUpdateZipDir${name.capitalize()}", Copy) {
            dependsOn copyApkTask, copyScriptTask, copyScript2Task
            from zipBase
            into zipWithFDroidBase
        }

        def copyFDroidApkTask = project.tasks.create("copyFDroidApk${name.capitalize()}", Copy) {
            dependsOn getPrivilegedExtensionApkTask, getFDroidApkTask, copyUpdateZipDirTask
            from "${buildDir}/intermediates/FDroid.apk"
            into zipWithFDroidBase
        }

        def updateZipFromBinariesTask = project.tasks.create("assembleUpdateZipFromBinaries${name.capitalize()}", Zip) {
            dependsOn copyFDroidApkTask
            from zipWithFDroidBase
            // the .zip name should end in "-debug.zip" once this is ZIP is signed, like updateZipTask
            archiveName "${archivesBaseName}FromBinaries-${getVersionName()}.zip"
        }

        project.tasks.build.dependsOn updateZipTask
    }
}

checkstyle {
    toolVersion = '7.1'
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src/main/java'
    include '**/*.java'

    classpath = files()
}
